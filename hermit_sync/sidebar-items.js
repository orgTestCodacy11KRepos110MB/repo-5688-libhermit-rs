window.SIDEBAR_ITEMS = {"fn":[["without_interrupts","Run a closure with disabled interrupts."]],"struct":[["CallOnce","A synchronization primitive that can only be called once sucessfully."],["CallOnceError","The `CallOnceError` error indicates that [`CallOnce::call_once`] has been called more than once."],["ExclusiveCell","A synchronization primitive which can be accessed only once."],["RawInterruptMutex","An interrupt-safe mutex."],["RawSpinMutex","A simple test and test-and-set spinlock with exponential backoff."],["RawTicketMutex","A fair ticket lock with exponential backoff."]],"type":[["InterruptLazy","A [`generic_once_cell::Lazy`], initialized using [`RawInterruptSpinMutex`]."],["InterruptMutex","A [`lock_api::Mutex`] based on [`RawInterruptMutex`]."],["InterruptMutexGuard","A [`lock_api::MutexGuard`] based on [`RawInterruptMutex`]."],["InterruptOnceCell","A [`generic_once_cell::OnceCell`], initialized using [`RawInterruptSpinMutex`]."],["InterruptSpinMutex","A [`lock_api::Mutex`] based on [`RawInterruptSpinMutex`]."],["InterruptSpinMutexGuard","A [`lock_api::MutexGuard`] based on [`RawInterruptSpinMutex`]."],["InterruptTicketMutex","A [`lock_api::Mutex`] based on [`RawInterruptTicketMutex`]."],["InterruptTicketMutexGuard","A [`lock_api::MutexGuard`] based on [`RawInterruptTicketMutex`]."],["Lazy","A [`generic_once_cell::Lazy`], initialized using [`RawSpinMutex`]."],["OnceCell","A [`generic_once_cell::OnceCell`], initialized using [`RawSpinMutex`]."],["RawInterruptSpinMutex","An interrupt-safe [`RawSpinMutex`]."],["RawInterruptTicketMutex","An interrupt-safe [`RawTicketMutex`]."],["SpinMutex","A [`lock_api::Mutex`] based on [`RawSpinMutex`]."],["SpinMutexGuard","A [`lock_api::MutexGuard`] based on [`RawSpinMutex`]."],["TicketMutex","A [`lock_api::Mutex`] based on [`RawTicketMutex`]."],["TicketMutexGuard","A [`lock_api::MutexGuard`] based on [`RawTicketMutex`]."]]};